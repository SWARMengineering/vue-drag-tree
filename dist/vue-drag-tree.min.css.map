{"version":3,"sources":["webpack:///./src/DragNode.vue","webpack:///./src/DragNode.vue?d2f2"],"names":[],"mappings":"AA2OA,+DACE,mBACA,UAAY,CAEd,+BACE,qBACA,cAAe,CAMhB,qCAHG,oBAAa,aACb,wBAAqB,qBAGzB,2CACE,oBAAsB,CAExB,qCACI,sCACA,2CACA,6CAA+C,CAEnD,iDACE,qCAAuC,CAEzC,wDACE,SAAU,CAEZ,4CACE,mBACA,mBACA,iBACA,iBAAkB,CAEpB,oCACA,SAAW,CCKX,eACA,uBAEA,iBACA,eACA,iCACA,sCACA,gDACA,yCAGA,MACA,eAGA,MACA,gBAMA,YALA,iCACA,0CACA,oDAQA,MAJA,eAMA,cACA,YACA,sBACA,kBACA,eACA,cACA,iCACA,yCAGA,YACA,WACA,cAGA,oBACA,qBACA,QACA,SACA,iBACA,iBACA,2BACA,iCACA,oCACA,0BACA,qCAGA,aACA,wBAGA,UACA,eAGA,UACA,gBAGA,mBACA,gBACA,sEAGA,kBACA,gBACA,cAEA,YACA,mBACA,mBACA,iBACA,kBAEA,sBACA,WAGA,aACA,gBAGA,UACA,iCACA","file":"vue-drag-tree.min.css","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.spanText, .spanUnderlineText {\n  white-space: nowrap;\n  color: white;\n}\n.treeNodeText {\n  color: white !important;\n  cursor: pointer;\n\n  .text {\n    display: flex;\n    align-items: baseline;\n  }\n}\n.light-mode .treeNodeText {\n  color: #555 !important;\n}\n.vue-drag-node-icon{\n    border-left: 14px solid white !important;\n    border-top: 6px solid transparent !important;\n    border-bottom: 6px solid transparent !important;\n}\n.light-mode .vue-drag-node-icon{\n  border-left: 15px solid #555 !important;\n}\n.light-mode .spanIcon svg > *:first-child{\n  fill: #555;\n}\n.dnd-container .is-clicked {\n  background: #ff7a00;\n  border-radius: 10px;\n  margin-left: 12px;\n  margin-right: 12px;\n}\n.spanIcon svg path {\nfill: white;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/DragNode.vue","<template>\n  <div :style='styleObj' :draggable='isDraggable' @drag.stop='drag' @dragstart.stop='dragStart' @dragover.stop='dragOver' @dragenter.stop='dragEnter' @dragleave.stop='dragLeave' @drop.stop='drop' @dragend.stop='dragEnd' class='dnd-container'>\n    <div :class='{\"is-clicked\": isClicked,\"is-hover\":isHover}' @click=\"toggle\" @mouseover='mouseOver' @mouseout='mouseOut' @dblclick=\"changeType\">\n      <div :style=\"{ 'padding-left': (this.depth - 1) * 1.5 + 'rem' }\" :id='model.id' class='treeNodeText'>\n        <span :class=\"determineCaret\"></span>\n        <div class='text'>\n          <span class= 'spanIcon' v-html=\"computeIcon(model.subtype, false, model.use_as)\"></span>\n          <span :class=\"[isClicked ? 'spanSelectedText' : '' , isHover ? 'spanUnderlineText' : 'spanText']\"> {{model.name}} </span>\n        </div>\n      </div>\n    </div>\n    <div class='treeMargin' v-show=\"computedOpen\" v-if=\"isFolder\">\n      <drag-node :draggable='isDraggable' :createChildNodeOnDoubleClick=\"createChildNodeOnDoubleClick\" :open=\"item2.open\" v-for=\"item2 in model.children\" :allowDrag='allowDrag' :allowDrop='allowDrop' :depth='increaseDepth' :model=\"item2\" :key='item2.id' :defaultText='defaultText'>\n      </drag-node>\n    </div>\n  </div>\n</template>\n\n<script>\nlet id = 1000\nlet fromData = null\nlet toData = null\nlet nodeClicked = undefined // Attention: Recursive components share a comon 'highest-level scope' (not the most accurate terminilogy, but basically what it means). As in: share the few 'left' variables above, serves as highlight for current node.\nlet rootTree = null // vue-drag-tree component reference\n\nimport { findRoot, exchangeData } from './util'\nexport default {\n  name: 'DragNode',\n  data() {\n    return {\n      isClicked: false, //  ** clicking current node\n      isHover: false, //  ** hovering current node\n      styleObj: {\n        opacity: 1\n      },\n      willOpen: this.open,\n    }\n  },\n  props: {\n    open: {\n      type: Boolean,\n      default: false\n    },\n    model: Object,\n    allowDrag: {\n      type: Function,\n      default: () => true\n    },\n    allowDrop: {\n      type: Function,\n      default: () => true\n    },\n    defaultText: {\n      type: String,\n      default: 'New item'\n    },\n    depth: {\n      type: Number,\n      default: 0\n    },\n    createChildNodeOnDoubleClick: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    determineCaret () {\n      let hasChildren = this.model && this.model.children && this.model.children.length > 0\n      if (!hasChildren || !(this.open || this.willOpen)) return ['vue-drag-node-icon']\n      else return ['nodeClicked', 'vue-drag-node-icon']\n    },\n    isFolder() {\n      return this.model.children && this.model.children.length\n    },\n    increaseDepth() {\n      return this.depth + 1\n    },\n    isDraggable() {\n      return this.allowDrag(this.model, this)\n    },\n    computedOpen: {\n      get() {\n        return this.willOpen\n      },\n      set(newValue) {\n        this.willOpen = newValue\n      }\n    }\n  },\n  methods: {\n    computeIcon(subtype, smallItemRef, useAs) {\n      console.log('subtype', subtype)\n      switch(subtype)\n      {\n        case 'algorithm':\n        case 'bundle':\n        case 'capture':\n        case 'configuration':\n        case 'format':\n        case 'optimization':\n        case 'organization':\n          return `<i class=\"sw-${subtype}\"></i>`\n        case 'process':\n          return '<i class=\"sw-menu-tree\"></i>'\n        case 'persona':\n          return '<i class=\"sw-brain-configuration\"></i>'\n        case 'asset':\n          return '<i class=\"sw-cube\"></i>'\n        case 'dashmodel':\n          return '<i class=\"sw-grid\"></i>'\n        case 'constraint':\n          return '<i class=\"sw-filter\"></i>'\n        case 'datamodel':\n          return '<i class=\"sw-data-model\"></i>'\n        case 'folder':\n          return `<i class=\"sw-${this.computedOpen ? 'folder-open' : 'folder'}\"></i>`\n        case 'itemref':\n          return `<i class=\"sw-${this.smallItemRef ? 'link-small' : 'link'}\"></i>`\n        case 'functor':\n          return `<i class=\"sw-goal-tree\"></i>`\n        case 'metric':\n          return `<i class=\"sw-screen-recording\"></i>`\n        case 'declaration':\n          return `<i class=\"sw-${useAs && useAs === 'declaration.output' ? 'items-list' : 'parameter'}\"></i>`\n        case 'order':\n          return `<i class=\"sw-timer\"></i>`\n        case 'codetemplate':\n          return `<i class=\"sw-templates\"></i>`\n        default:\n          return null\n      }\n    },\n    toggle() {\n      if (this.isFolder) {\n        this.willOpen = !this.willOpen\n      }\n      rootTree.emitCurNodeClicked(this.model, this)\n      this.isClicked = !this.isClicked\n      if (nodeClicked != this.model.id) {\n        let treeParent = rootTree.$parent\n        let nodeStack = [treeParent.$children[0]]\n        while (nodeStack.length != 0) {\n          let item = nodeStack.shift()\n          item.isClicked = false\n          if (item.$children && item.$children.length > 0) {\n            nodeStack = nodeStack.concat(item.$children)\n          }\n        }\n        this.isClicked = true\n        nodeClicked = this.model.id\n      }\n    },\n    changeType() {\n      if(this.createChildNodeOnDoubleClick) {\n        if (this.currentHighlight) {\n          nodeClicked = this.model.id\n        }\n        if (!this.isFolder) {\n          this.$set(this.model, 'children', [])\n          this.addChild()\n          this.willOpen = true\n          this.isClicked = true\n        }\n      }\n    },\n    mouseOver(e) {\n      this.isHover = true\n    },\n    mouseOut(e) {\n      this.isHover = false\n    },\n    addChild() {\n      this.model.children.push({\n        name: this.defaultText,\n        id: id++\n      })\n    },\n    removeChild(id) {\n      let parent_model_children = this.$parent.model.children\n      for (let index in parent_model_children) {\n        if (parent_model_children[index].id == id) {\n          parent_model_children = parent_model_children.splice(index, 1)\n          break\n        }\n      }\n    },\n    drag(e) {\n      fromData = this\n      rootTree.emitDrag(this.model, this, e)\n    },\n    dragStart(e) {\n      e.dataTransfer.effectAllowed = 'move'\n      e.dataTransfer.setData('text/plain', 'asdad')\n      return true\n    },\n    dragOver(e) {\n      e.preventDefault()\n      rootTree.emitDragOver(this.model, this, e)\n      return true\n    },\n    dragEnter(e) {\n      if (this._uid !== fromData._uid) {\n        this.styleObj.opacity = 0.5\n      }\n      rootTree.emitDragEnter(this.model, this, e)\n    },\n    dragLeave(e) {\n      this.styleObj.opacity = 1\n      rootTree.emitDragLeave(this.model, this, e)\n    },\n    drop(e) {\n      e.preventDefault()\n      this.styleObj.opacity = 1\n      if (!this.allowDrop(this.model, this)) {\n        return\n      }\n      toData = this\n      exchangeData(rootTree, fromData, toData)\n      rootTree.emitDrop(this.model, this, e)\n    },\n    dragEnd(e) {\n      rootTree.emitDragEnd(this.model, this, e)\n      return\n    }\n  },\n  beforeCreate() {\n    this.$options.components.item = require('./DragNode.vue')\n  },\n  created() {\n    rootTree = findRoot(this)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n  .spanText, .spanUnderlineText {\n    white-space: nowrap;\n    color: white;\n  }\n  .treeNodeText {\n    color: white !important;\n    cursor: pointer;\n\n    .text {\n      display: flex;\n      align-items: baseline;\n    }\n  }\n  .light-mode .treeNodeText {\n    color: #555 !important;\n  }\n  .vue-drag-node-icon{\n      border-left: 14px solid white !important;\n      border-top: 6px solid transparent !important;\n      border-bottom: 6px solid transparent !important;\n  }\n  .light-mode .vue-drag-node-icon{\n    border-left: 15px solid #555 !important;\n  }\n  .light-mode .spanIcon svg > *:first-child{\n    fill: #555;\n  }\n  .dnd-container .is-clicked {\n    background: #ff7a00;\n    border-radius: 10px;\n    margin-left: 12px;\n    margin-right: 12px;\n  }\n  .spanIcon svg path {\n  fill: white;\n  }\n</style>\n\n<style>\n.dnd-container {\n  background: transparent;\n}\n.dnd-container i {\n  font-size: 15px;\n  display: flex;\n  justify-content: end;\n  flex-direction: column;\n  align-items: center;\n}\n\n.item {\n  cursor: pointer;\n}\n\n.bold {\n  font-weight: bold;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.text {\n  font-size: 12px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.treeNodeText {\n  height: 28px;\n  box-sizing: border-box;\n  width: fit-content;\n  font-size: 18px;\n  color: #324057;\n  display: flex;\n  align-items: center;\n}\n\n.changeTree {\n  width: 1rem;\n  color: #324057;\n}\n\n.vue-drag-node-icon {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 10px;\n  margin-right: 8px;\n  border-left: 4px solid grey;\n  border-top: 4px solid transparent;\n  border-bottom: 4px solid transparent;\n  border-right: 0 solid yellow;\n  transition: transform 0.3s ease-in-out;\n}\n\n.nodeClicked {\n  transform: rotate(90deg);\n}\n\n.spanIcon {\n    margin-top: 2px;\n}\n\n.spanText {\n    margin-left: 6px;\n}\n\n.spanUnderlineText {\n    margin-left: 6px;\n    text-decoration-line: underline;\n}\n\n.spanSelectedText {\n    margin-left: 6px;\n    color: #ed9235;\n}\n.is-clicked {\n    background: #FF7A00;\n    border-radius: 10px;\n    margin-left: 12px;\n    margin-right: 12px;\n}\n.is-clicked .spanText {\n    color: #fff;\n}\n\n.spanItemref {\n    margin-left: 2px;\n}\n\n.divIcons {\n  display: flex;\n  justify-content: space_between;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// ./src/DragNode.vue?f6990096"],"sourceRoot":""}